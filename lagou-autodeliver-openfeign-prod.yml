server:
  port: 8888
spring:
  application:
    name: lagou-autodeliver-openfeign
  zipkin:
    base-url: http://hk2:9411 # zipkin server的请求地址 sender:
      # web 客户端将踪迹日志数据通过网络请求的方式传送到服务端，另外还有配 置
      # kafka/rabbit 客户端将踪迹日志数据传递到mq进行中转
    sender:
      type: web
  sleuth:
    sampler:
      # 采样率 1 代表100%全部采集 ，默认0.1 代表10% 的请求踪迹数据会被采集
      # 生产环境下，请求量非常大，没有必要所有请求的踪迹数据都采集分析，对于网络包括server端压力都是比较大的，可以配置采样率采集一定比例的请求的踪迹 数据进行分析即可
      probability: 1
  rabbitmq:
    host: hk2
    port: 5672
    username: admin
    password: admin
eureka:
  client:
    service-url:
      defaultZone: http://s1:10010/eureka/,http://s2:10011/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@
    # 自定义元数据
    metadata-map:
      region: chengdu

  # 开启Feign的熔断功能
feign:
  compression:
    request:
      enabled: true # 开启请求压缩
      mime-types: text/html,application/xml,application/json # 设置压缩的数据类型，此处也是默认值
      min-request-size: 2048 # 设置触发压缩的大小下限，此处也是默认值
    response:
      enabled: true # 开启响应压缩
  hystrix:
    enabled: true

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # hystrix 超时时长设置
            timeoutInMilliseconds: 15000
# 修改负载均衡策略
#针对的被调用方微服务名称,不加就是全局生效
lagou-resume:
  ribbon:
    #请求连接超时时间
    ConnectTimeout: 2000
    #请求处理超时时间
    ReadTimeout: 5000
    #对所有操作都进行重试
    OkToRetryOnAllOperations: true
    #根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例(次数 由MaxAutoRetries配置)，
    #如果不行，就换一个实例进行访问，如果还不行，再换一次实例访问(更换次数 由MaxAutoRetriesNextServer配置)，
    #如果依然不行，返回失败信息。
    MaxAutoRetries: 0 #对当前选中实例重试次数，不包括第一次调用
    MaxAutoRetriesNextServer: 0 #切换实例的重试次数
    # 负载均衡策略
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

logging:
  level:
    io.cruii.autodeliver.openfeign.feign.ResumeServiceFeignClient: debug
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.cloud.sleuth: debug
info:
  msg: hello beijing
